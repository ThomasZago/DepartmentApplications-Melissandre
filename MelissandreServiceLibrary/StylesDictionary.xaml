<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:MelissandreServiceLibrary.Converter"
                    xmlns:enum="clr-namespace:MelissandreServiceLibrary.Enum">
    
    <converter:NonEmptyStringToVisibilityConverter x:Key="NonEmptyStringToVisibilityConverter"/>
    <converter:EnumToListConverter x:Key="EnumToListConverter"/>
    <converter:EnumValueConverter x:Key="EnumValueConverter"/>
    <SolidColorBrush x:Key="ChartGrey" Color="#2c3d4d"/>
    <SolidColorBrush x:Key="ChartDarkBlue" Color="#003049"/>
    <SolidColorBrush x:Key="ChartBlue" Color="#669bbc"/>
    <SolidColorBrush x:Key="ChartLightBlue" Color="#87bbc9"/>
    <SolidColorBrush x:Key="ChartYellow" Color="#fdd7aa"/>
    <SolidColorBrush x:Key="ChartOrange" Color="#eeab23"/>
    <SolidColorBrush x:Key="ChartRed" Color="#cc6151"/>
    <SolidColorBrush x:Key="ChartDarkRed" Color="#b5313c"/>

    <Style x:Key="LightTextStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Sen"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="{StaticResource ChartGrey}"/>
    </Style>
    <Style x:Key="TitleTextStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Lago"/>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Foreground" Value="{StaticResource ChartDarkBlue}"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="CustomCheckboxStyle" TargetType="CheckBox">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="CheckBorder"
                            Grid.Column="0"
                            Height="25"
                            Width="25"
                            Background="Transparent"
                            BorderBrush="{StaticResource ChartGrey}"
                            BorderThickness="3"
                            CornerRadius="4"
                            Margin="0,0,6,0">
                            <Viewbox Width="17" Height="17">
                                <Path x:Name="CheckIcon"
                                  Data="M0,5 L4,10 L11,1"
                                  Stroke="White"
                                  StrokeThickness="2"
                                  Opacity="0" />
                            </Viewbox>
                        </Border>
                        <ContentPresenter Grid.Column="1"
                                      HorizontalAlignment="Left"
                                      VerticalAlignment="Center"
                                      Margin="0,0,0,0"
                                      Content="{TemplateBinding Content}"
                                      ContentTemplate="{TemplateBinding ContentTemplate}">
                            <ContentPresenter.Resources>
                                <Style TargetType="TextBlock">
                                    <Setter Property="FontFamily" Value="Lago"/>
                                    <Setter Property="FontWeight" Value="DemiBold"/>
                                    <Setter Property="FontSize" Value="15"/>
                                    <Setter Property="Foreground" Value="{StaticResource ChartGrey}"/>
                                </Style>
                            </ContentPresenter.Resources>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckIcon" Property="Opacity" Value="1" />
                            <Setter TargetName="CheckBorder" Property="Background" Value="{StaticResource ChartGrey}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomIconButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource ChartLightBlue}" />
        <Setter Property="Foreground" Value="{StaticResource ChartDarkBlue}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="30"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="ButtonBackground"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="20" />
                        <ContentPresenter HorizontalAlignment="Center"
                                      VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartBlue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartDarkBlue}" />
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomLargeButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource ChartLightBlue}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="50"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="ButtonBackground"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10" />
                        <TextBlock x:Name="ButtonTextBlock"
                               Margin="10"
                               Text="{TemplateBinding Content}"
                               Style="{StaticResource TitleTextStyle}"
                               FontSize="20"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartBlue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartDarkBlue}" />
                            <Setter TargetName="ButtonTextBlock" Property="Foreground" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomMediumButtonStyle" TargetType="Button" BasedOn="{StaticResource CustomLargeButtonStyle}">
        <Setter Property="Height" Value="35"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="ButtonBackground"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10" />
                        <TextBlock x:Name="ButtonTextBlock"
                               Margin="10"
                               Text="{TemplateBinding Content}"
                               Style="{StaticResource LightTextStyle}"
                               FontSize="16"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartBlue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartDarkBlue}" />
                            <Setter TargetName="ButtonTextBlock" Property="Foreground" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LightButtonStyle" TargetType="Button" BasedOn="{StaticResource CustomMediumButtonStyle}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="ButtonBackground"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="10" />
                        <TextBlock x:Name="ButtonTextBlock"
                               Margin="5"
                               Text="{TemplateBinding Content}"
                               Style="{StaticResource LightTextStyle}"
                               FontSize="13"
                               HorizontalAlignment="Center"
                               VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartBlue}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBackground" Property="Background" Value="{StaticResource ChartDarkBlue}" />
                            <Setter TargetName="ButtonTextBlock" Property="Foreground" Value="white" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Border x:Name="ButtonBackground"
                            Background="Transparent"
                            CornerRadius="10" />
                        <TextBlock x:Name="ButtonTextBlock"
                               Text="{TemplateBinding Content}"
                               Style="{StaticResource TitleTextStyle}"
                               FontSize="16"
                               TextDecorations="None"
                               TextAlignment="Center"
                               VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonTextBlock" Property="TextBlock.TextDecorations" Value="Underline" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonTextBlock" Property="Foreground" Value="{StaticResource ChartBlue}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TextBoxStyle" TargetType="TextBox">
        <Setter Property="Foreground" Value="{StaticResource ChartGrey}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Grid>
                        <Border Background="#F0F5FA"
                            BorderThickness="0"
                            CornerRadius="5"/>
                        <TextBox Background="Transparent"
                             Margin="15,15,15,15"
                             BorderThickness="0"
                             FontFamily="Sen"
                             FontSize="16"
                             Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CardBorderStyle" TargetType="Border">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="CornerRadius" Value="10"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>
    <Style x:Key="ErrorMessageStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource ChartDarkRed}"/>
        <Setter Property="Visibility" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text, Converter={StaticResource NonEmptyStringToVisibilityConverter}}" />
    </Style>
    <Style x:Key="CustomComboBoxStyle" TargetType="ComboBox">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="Gray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <Border x:Name="Border"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                CornerRadius="5">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="20"/>
                                </Grid.ColumnDefinitions>
                                <ToggleButton x:Name="ToggleButton"
                                              Grid.Column="1"
                                              BorderThickness="0"
                                              Background="Transparent"
                                              IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ToggleButton.Content>
                                        <Viewbox Width="8" Height="8">
                                            <Path x:Name="Arrow"
                                              HorizontalAlignment="Center"
                                              VerticalAlignment="Center"
                                              Data="M0,0 L1,1 L2,0"
                                              Fill="Black" />
                                        </Viewbox>
                                    </ToggleButton.Content>
                                </ToggleButton>
                                <ContentPresenter x:Name="ContentPresenter"
                                                  Grid.Column="0"
                                                  Margin="5,0,0,0"
                                                  HorizontalAlignment="Left"
                                                  VerticalAlignment="Center"
                                                  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                                  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}">
                                    <ContentPresenter.Content>
                                        <TextBlock Text="{Binding RelativeSource={RelativeSource TemplatedParent},
                                                            Path=SelectionBoxItem,
                                                            Converter={StaticResource EnumValueConverter}}"
                                           Style="{StaticResource LightTextStyle}"/>
                                    </ContentPresenter.Content>
                                </ContentPresenter>
                            </Grid>
                        </Border>
                        <Popup x:Name="Popup"
                               AllowsTransparency="True"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom"
                               PopupAnimation="Slide">
                            <Border x:Name="DropDownBorder"
                                    Background="White"
                                    BorderBrush="Gray"
                                    BorderThickness="1"
                                    CornerRadius="5">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <ItemsPresenter />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Opacity" Value="0.5" />
                        </Trigger>
                        <Trigger Property="IsDropDownOpen" Value="True">
                            <Setter TargetName="Arrow" Property="Data" Value="M0,2 L2,2 L1,0 Z" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ComboboxClientAccountStyle" TargetType="ComboBox" BasedOn="{StaticResource CustomComboBoxStyle}">
        <Setter Property="ItemsSource" Value="{Binding Source={x:Type enum:ClientAccountType}, Converter={StaticResource EnumToListConverter}}"/>
    </Style>
    <Style x:Key="ComboboxAccountStatusStyle" TargetType="ComboBox" BasedOn="{StaticResource CustomComboBoxStyle}">
        <Setter Property="ItemsSource" Value="{Binding Source={x:Type enum:AccountStatus}, Converter={StaticResource EnumToListConverter}}"/>
    </Style>
    <Style x:Key="ComboboxDepartmentAccountStyle" TargetType="ComboBox" BasedOn="{StaticResource CustomComboBoxStyle}">
        <Setter Property="ItemsSource" Value="{Binding Source={x:Type enum:DepartmentAccountType}, Converter={StaticResource EnumToListConverter}}"/>
    </Style>

    <Style x:Key="DataGridStyle" TargetType="DataGrid">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="#F4F5F7"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="GridLinesVisibility" Value="None"/>
        <Setter Property="RowStyle">
            <Setter.Value>
                <Style TargetType="DataGridRow">
                    <Setter Property="VerticalAlignment" Value="Stretch" />
                    <Setter Property="Background" Value="White" />
                    <Style.Triggers>
                        <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                            <Setter Property="Background" Value="#F4F5F7" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="LightGray" />
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="CellStyle">
            <Setter.Value>
                <Style TargetType="DataGridCell">
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="DataGridCell">
                                <Grid Background="{Binding RelativeSource={RelativeSource AncestorType=DataGridRow}, Path=Background}">
                                    <Border BorderThickness="0">
                                        <ContentPresenter Margin="5,5"/>
                                    </Border>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ColumnHeaderStyle">
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="VerticalAlignment" Value="Center" />
                    <Setter Property="HorizontalAlignment" Value="Center"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                                <ContentPresenter>
                                    <ContentPresenter.ContentTemplate>
                                        <DataTemplate>
                                            <TextBlock Style="{StaticResource LightTextStyle}" Text="{Binding}" Margin="5,5"/>
                                        </DataTemplate>
                                    </ContentPresenter.ContentTemplate>
                                </ContentPresenter>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>







</ResourceDictionary>